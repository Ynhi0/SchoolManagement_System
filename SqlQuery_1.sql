CREATE DATABASE SCHOOLDATABASES
GO
USE SCHOOLDATABASES
CREATE TABLE USERS
(
	IDUSER INT NOT NULL 
	CONSTRAINT PK_IDUSER PRIMARY KEY,
	USERNAME NVARCHAR(20) NOT NULL,
	Passwords NVARCHAR(20) NOT NULL,
	DisplayName NVARCHAR(20) NOT NULL,
	ROLE NVARCHAR(10) NOT NULL
)
CREATE TABLE TEACHER
(
	IDTEACHER INT
	CONSTRAINT PK_TEACHER PRIMARY KEY,
	IDUSER NVARCHAR(10) NOT NULL
)
CREATE TABLE TEACHERINFOR
(
	IDTEACHER NVARCHAR(10) NOT NULL
	CONSTRAINT PD_IDTEACHER PRIMARY KEY,
	NAMEOFTEACHER NVARCHAR(MAX) NOT NULL,
	BORNDATE DATETIME NOT NULL,
	GENDER NVARCHAR(10) NOT NULL,
	ADDRESSOFTEACHER NVARCHAR(MAX) NOT NULL,
	SALARY FLOAT NOT NULL,
	PHONE NVARCHAR(10) NOT NULL,
	
)
ALTER TABLE TEACHERINFOR
	ADD STATUS NVARCHAR(50)
ALTER TABLE TEACHERINFOR
	ADD SALARYCOEFFICIENT INT 

CREATE TABLE WORKING (
	ID NVARCHAR(10) PRIMARY KEY NOT NULL,
	IDTEACHER NVARCHAR(10) NOT NULL,
	Month INT NOT NULL,
	Year INT NOT NULL,
	WorkingHours INT NOT NULL
)
ALTER TABLE WORKING
ADD Status NVARCHAR(50)
ADD CONSTRAINT FK_KEY
	FOREIGN KEY(IDTEACHER)
	REFERENCES TEACHERINFOR(IDTEACHER)
CREATE TABLE CLASS
(
	IDCLASS NVARCHAR(10) NOT NULL
	CONSTRAINT PK_CLASS PRIMARY KEY,
	CLASSNAME NVARCHAR(20) NOT NULL,
	NUMBEROFSTUDENT INT NOT NULL,
	STARTDATE DATETIME NOT NULL,
	ENDDATE DATETIME NOT NULL,
	IDTEACHER NVARCHAR(10) NOT NULL,
	CAHOC INT NOT NULL,
	STATES NVARCHAR(MAX) NOT NULL,
	ROOM INT ,
	TIMETABLE NVARCHAR(10)
)
CREATE TABLE STUDENT 
(
	IDS NVARCHAR(10) NOT NULL 
	CONSTRAINT PK_IDSTUDENT PRIMARY KEY,
	IDUSER INT,
	IDCLASS NVARCHAR(10) NOT NULL
)
CREATE TABLE STUDENTINFOR(
	IDS NVARCHAR(10) NOT NULL
	CONSTRAINT PK_IDSSTU PRIMARY KEY,
	NAMESTUDENT NVARCHAR(50) NOT NULL,
	GENDER NVARCHAR(10) NOT NULL,
	BORNDATE DATETIME NOT NULL,
	IDCLASS NVARCHAR(10) NOT NULL,
	STATES NVARCHAR(MAX) NOT NULL
)

CREATE TABLE SCORED(
	IDSTU NVARCHAR(10) NOT NULL,
	IDCLASS NVARCHAR(10) NOT NULL,
	READSCORED INT NOT NULL,
	WRITESCORED INT NOT NULL,
	SPEAKSCORED INT NOT NULL,
	LISTENSCORED INT NOT NULL,
	TOTALSCORED INT NOT NULL
)


CREATE TABLE SEMESTER(
	IDCLASS NVARCHAR(10),
	SPEAKINGTEST DATETIME,
	WRITINGTEST DATETIME,
	READINGTEST DATETIME,
	LISTENINGTEST DATETIME
)

CREATE TABLE STUDENTFEE(
	IDS NVARCHAR(10) NOT NULL,
	MONTHS INT NOT NULL,
	DUEDATE DATETIME NOT NULL,
	TUITIONFEE INT NOT NULL,
	STATE NVARCHAR(20)
)
ALTER TABLE STUDENTFEE
ADD CONSTRAINT FK_IDSS
	FOREIGN KEY(IDS)
	REFERENCES STUDENTINFOR(IDS)

ALTER TABLE TEACHER 
ADD CONSTRAINT FK_TEACHERIDS 
	FOREIGN KEY(IDTEACHER)
	REFERENCES TEACHERINFOR(IDTEACHER)

ALTER TABLE TEACHER
ADD CONSTRAINT FK_IDUSER 
	FOREIGN KEY(IDUSER)
	REFERENCES USERS(IDUSER)

ALTER TABLE CLASS
ADD CONSTRAINT FK_TEACHERCLASS 
	FOREIGN KEY(IDTEACHER)
	REFERENCES TEACHER(IDTEACHER)

ALTER TABLE STUDENT 
ADD CONSTRAINT FK_STUCLASS
	FOREIGN KEY(IDCLASS)
	REFERENCES CLASS(IDCLASS)

ALTER TABLE STUDENT
ADD CONSTRAINT FK_IDSUSER
	FOREIGN KEY(IDUSER)
	REFERENCES USERS(IDUSER)

ALTER TABLE STUDENT
ADD CONSTRAINT FK_STUDENTID
	FOREIGN KEY(IDS)
	REFERENCES STUDENTINFOR(IDS)

ALTER TABLE STUDENTINFOR
ADD CONSTRAINT FK_STUDENTOFCLASS
	FOREIGN KEY(IDCLASS)
	REFERENCES CLASS(IDCLASS)

ALTER TABLE SCORED
ADD CONSTRAINT FK_STUSCORE
	FOREIGN KEY(IDSTU)
	REFERENCES STUDENT(IDS)
	
ALTER TABLE SCORED
ADD CONSTRAINT FK_STUSCLASS
	FOREIGN KEY(IDCLASS)
	REFERENCES CLASS(IDCLASS)

ALTER TABLE SEMESTER
ADD CONSTRAINT FK_SEMESTER
	FOREIGN KEY(IDCLASS)
	REFERENCES CLASS(IDCLASS)


INSERT INTO TEACHERINFOR VALUES('GV00001',N'Nguyễn Văn An','1/29/1992','Nam','TPHCM',8000000,'09748329',1,'Working')
INSERT INTO TEACHERINFOR VALUES('GV00002',N'Nguyễn Văn Anh','3/20/1990','Nam','TPHCM',8500000,'098348297',1,'Working')
INSERT INTO TEACHERINFOR VALUES('GV00003',N'Trần Ngọc Dung','7/8/1995','Nam','TPHCM',7500000,'095730892',1,'Working')
INSERT INTO TEACHERINFOR VALUES('GV00004',N'Võ Hoàng Châu','12/15/1990','Nam','TPHCM',8500000,'097488329',1,'Working')
INSERT INTO TEACHERINFOR VALUES('GV00005',N'Phùng Minh','2/27/1987','Nam','TPHCM',9000000,'083889253',1,'Working')

INSERT INTO USERS VALUES(1,'GV00001','12345',N'Nguyễn Văn An','Teacher')
INSERT INTO USERS VALUES(2,'GV00002','12345',N'Nguyễn Văn Anh','Teacher')
INSERT INTO USERS VALUES(3,'GV00003','12345',N'Trần Ngọc Dung','Teacher')
INSERT INTO USERS VALUES(4,'GV00004','12345',N'Võ Hoàng Châu','Teacher')
INSERT INTO USERS VALUES(5,'GV00005','12345',N'Phùng Minh','Teacher')


INSERT INTO TEACHER VALUES('GV00001',1)
INSERT INTO TEACHER VALUES('GV00002',2)
INSERT INTO TEACHER VALUES('GV00003',3)
INSERT INTO TEACHER VALUES('GV00004',4)
INSERT INTO TEACHER VALUES('GV00005',5)

INSERT INTO CLASS VALUES('LH0001E010','TANC01',5,'2/1/2019','2/4/2019','GV00001',1,N'Đang Hoạt Động',1,'2-4-6')
INSERT INTO CLASS VALUES('LH0001E011','TANC01',5,'2/1/2019','2/4/2019','GV00002',2,N'Đang Hoạt Động',2,'2-4-6')
INSERT INTO CLASS VALUES('LH0001E012','TANC01',5,'2/1/2019','2/4/2019','GV00003',3,N'Đang Hoạt Động',1,'2-4-6')
INSERT INTO CLASS VALUES('LH0001E013','TANC01',5,'2/1/2019','2/4/2019','GV00004',4,N'Đang Hoạt Động',2,'2-4-6')
INSERT INTO CLASS VALUES('LH0001E020','TANC02',6,'2/1/2019','2/4/2019','GV00005',1,N'Đang Hoạt Động',3,'3-5-7')
INSERT INTO CLASS VALUES('LH0001B009','TACB10',5,'10/1/2018','1/30/2019','GV00004',1,N'Đã Kết Thúc',1,'3-5-7')

INSERT INTO STUDENTINFOR VALUES('ST00001',N'Hồng Đào',N'Nữ','1/20/2003','LH0001E010',N'Đang Học')
INSERT INTO STUDENTINFOR VALUES('ST00002',N'Văn Hoài',N'Nam','6/5/2002','LH0001E010',N'Đang Học')
INSERT INTO STUDENTINFOR VALUES('ST00011',N'Văn An',N'Nam','8/22/2004','LH0001E011',N'Đang Học')
INSERT INTO STUDENTINFOR VALUES('ST00012',N'Gia Linh',N'Nữ','3/20/2005','LH0001E011',N'Đang Học')
 
 INSERT INTO STUDENTFEE VALUES('ST00001',2,'2/9/2019',1000000,N'Đã Đóng')
 INSERT INTO STUDENTFEE VALUES('ST00001',3,'3/9/2019',1000000,N'Đã Đóng')

 UPDATE STUDENTINFOR
 SET STATES =N'Đang Học'
 INSERT INTO USERS VALUES(123,'admin','Admin123','Admin','Admin')



INSERT INTO USERS VALUES(10,'ST00001','12345',N'Hồng Đào','Student')
INSERT INTO USERS VALUES(11,'ST00002','12345',N'Văn Hoài','Student')
INSERT INTO USERS VALUES(12,'ST00011','12345',N'Văn An','Student')
INSERT INTO USERS VALUES(13,'ST00012','12345',N'Gia Linh','Student')


INSERT INTO STUDENT VALUES('ST00001',10,'LH0001E010')
INSERT INTO STUDENT VALUES('ST00002',11,'LH0001E010')
INSERT INTO STUDENT VALUES('ST00011',12,'LH0001E011')
INSERT INTO STUDENT VALUES('ST00012',13,'LH0001E011')

INSERT INTO SCORED VALUES ('ST00001','LH0001E010',25,20,22,18,85)
INSERT INTO SCORED VALUES ('ST00002','LH0001E010',23,18,23,22,86)
INSERT INTO SCORED VALUES ('ST00001','LH0001B009',20,20,22,21,83)
INSERT INTO SCORED VALUES ('ST00002','LH0001B009',22,24,21,24,91)


---------------------------------------------------------------PROCEDURE STORE-----------------------------------------

--LẤY THÔNG TIN TẤT CẢ HỌC VIÊN
CREATE PROCEDURE GetTotalStudents
AS
BEGIN
	SELECT COUNT(*) AS Total FROM STUDENTINFOR
END


-- THÊM THÔNG TIN HỌC VIÊN
CREATE PROCEDURE AddStudentsInfor
	@IDS NVARCHAR(10),
	@NAMESTUDENT NVARCHAR(50),
	@GENDER NVARCHAR(10),
	@BORNDATE DATETIME,
	@IDCLASS NVARCHAR(10),
	@STATES NVARCHAR(MAX)
AS
BEGIN
	SET NOCOUNT ON;

	INSERT INTO STUDENTINFOR(IDS,NAMESTUDENT,GENDER,BORNDATE,IDCLASS,STATES)
	VALUES (@IDS,@NAMESTUDENT,@GENDER,@BORNDATE,@IDCLASS,@STATES);
END



-- ĐẾM SỐ LƯỢNG HỌC VIÊN CÒN HỌC
CREATE PROCEDURE StateOfOnlStudent
AS
BEGIN 
	SELECT COUNT(*) AS TOTAL
	FROM STUDENTINFOR
	WHERE STATES=N'Đang Học'
END
-- ĐẾM SỐ LƯỢNG HỌC VIÊN ĐÃ NGHỈ
CREATE PROCEDURE StateofOFFStudent
AS
BEGIN
	SELECT COUNT(*) AS TOTAL
	FROM STUDENTINFOR
	WHERE STATES =N'Nghỉ Học'
END
-- LẤY THÔNG TIN TÀI KHOẢN
CREATE PROCEDURE GetStudentAccount
AS
BEGIN
	SELECT S.IDS,U.Passwords,U.DisplayName,UR.ROLES
	FROM STUDENT S, USERS U,USERROLE UR
	WHERE S.IDUSER=U.IDUSER AND U.IDUSER=UR.IDUSER
END
--LẤY THÔNG TIN CHI TIẾT HỌC VIÊN
CREATE PROCEDURE GetStudentDetails
AS
BEGIN
	SELECT * FROM STUDENTINFOR
END
--THÊM ĐIỂM HỌC VIÊN
CREATE PROCEDURE AddStudentsScore
	@IDSTU NVARCHAR(10),
	@IDCLASS NVARCHAR(10),
	@READSCORED INT,
	@WRITESCORED INT,
	@SPEAKSCORED INT,
	@LISTENSCORED INT,
	@TOTALSCORED INT
AS
BEGIN
	SET NOCOUNT ON;

	INSERT INTO SCORED(IDSTU,IDCLASS,READSCORED,WRITESCORED,SPEAKSCORED,LISTENSCORED,TOTALSCORE)
	VALUES (@IDSTU,@IDCLASS,@READSCORED,@WRITESCORED,@SPEAKSCORED,@LISTENSCORED,@TOTALSCORED);
END
--XEM CHI TIẾT ĐIỂM HỌC VIÊN
CREATE PROCEDURE StudentScoreDetails
AS
BEGIN
	SELECT S.IDSTU,ST.NAMESTUDENT,S.IDCLASS,C.CLASSNAME,S.LISTENSCORED,S.READSCORED,S.SPEAKSCORED,S.WRITESCORED,S.TOTALSCORE
	FROM SCORED S, STUDENTINFOR ST, CLASS C
	WHERE S.IDSTU =ST.IDS AND S.IDCLASS =C.IDCLASS
END

--SỬA BẢNG ĐIỂM HỌC VIÊN
CREATE PROCEDURE EditStudentScore
	@IDSTU NVARCHAR(10),
    @IDCLASS NVARCHAR(10),
    @LISTENSCORED INT,
    @READSCORED INT,
    @SPEAKSCORED INT,
    @WRITESCORED INT,
    @TOTALSCORE INT
AS
BEGIN
    UPDATE SCORED
    SET 
        IDCLASS = @IDCLASS,
        LISTENSCORED = @LISTENSCORED,
        READSCORED = @READSCORED,
        SPEAKSCORED = @SPEAKSCORED,
        WRITESCORED = @WRITESCORED,
        TOTALSCORE = @TOTALSCORE
    WHERE 
        IDSTU = @IDSTU;
END
--THÊM TÀI KHOẢN HỌC VIÊN
CREATE PROCEDURE AddStudentAccount
    @IDS NVARCHAR(10),
    @IDUSER INT,
    @USERNAME NVARCHAR(20),
    @Passwords NVARCHAR(20),
    @DisplayName NVARCHAR(20),
    @ROLES NVARCHAR(20)
AS
BEGIN
    DECLARE @IDCLASS NVARCHAR(10);

    BEGIN TRY
       
        SELECT TOP 1 @IDCLASS = C.IDCLASS
        FROM STUDENTINFOR ST, CLASS C
        WHERE  ST.IDCLASS = C.IDCLASS AND IDS = @IDS AND C.STATES = N'Đang Hoạt Động';

       
        IF @IDCLASS IS NULL
        BEGIN
            RAISERROR('Không tìm thấy lớp học phù hợp cho sinh viên đang hoạt động.', 16, 1);
            RETURN;
        END

       
        INSERT INTO USERS(IDUSER, USERNAME, Passwords, DisplayName,ROLE)
        VALUES (@IDUSER, @USERNAME, @Passwords, @DisplayName,@ROLES);

       

       
        INSERT INTO STUDENT(IDS, IDUSER, IDCLASS)
        VALUES (@IDS, @IDUSER, @IDCLASS);
        
    END TRY
    BEGIN CATCH
        
        SELECT ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END
--XÓA THÔNG TIN HỌC VIÊN
CREATE PROCEDURE DeleteStudentInfor
	@StudentID NVARCHAR(10)
AS
BEGIN
	DECLARE @IDUser INT
	DECLARE @IDClass NVARCHAR(10)
	
	SELECT @IDUser = IDUSER, @IDClass = IDCLASS
	FROM STUDENT
	WHERE IDS = @StudentID

	DELETE FROM STUDENT WHERE IDS = @StudentID
	DELETE FROM USERROLE WHERE IDUSER =@IDUser
	DELETE FROM USERS WHERE IDUSER = @IDUser
	DELETE FROM STUDENTINFOR WHERE IDS = @StudentID

	UPDATE CLASS
	SET NUMBEROFSTUDENT = NUMBEROFSTUDENT - 1
	WHERE IDCLASS =@IDClass
END
--XOÁ TÀI KHOẢN HỌC VIÊN
CREATE PROCEDURE DeleteStudentAccount
	@StudentID NVARCHAR(10)
AS
BEGIN
	DECLARE @IDUser int
	DECLARE @IDClass NVARCHAR(10)
	
	SELECT @IDUser = IDUSER, @IDClass = S.IDCLASS
	FROM STUDENT S, STUDENTINFOR ST
	WHERE S.IDS = ST.IDS AND   
			ST.IDS = @StudentID
			AND ST.STATES =N'Nghỉ Học'

	DELETE FROM STUDENT WHERE IDS = @StudentID

	DELETE FROM USERS WHERE IDUSER = @IDUser
END

--XẮP XẾP LỊCH THI

 CREATE PROCEDURE AddSemesterDate
     @IDCLASS NVARCHAR(10),
	 @SPEAKINGTEST DATETIME,
	 @WRITINGTEST DATETIME,
	 @READINGTEST DATETIME,
	 @LISTENINGTEST DATETIME
AS
BEGIN
	DECLARE @ENDDATE DATETIME

	BEGIN TRY
		SELECT TOP 1 @ENDDATE = ENDDATE
		FROM CLASS

		IF @SPEAKINGTEST <@ENDDATE OR
			@WRITINGTEST <@ENDDATE OR
			@READINGTEST <@ENDDATE OR
			@LISTENINGTEST <@ENDDATE
		BEGIN
		RAISERROR('Ngày kiểm tra không được nhỏ hơn ngày kết thúc lớp học',16,1)
		RETURN
		END

		INSERT INTO SEMESTER(IDCLASS,SPEAKINGTEST,WRITINGTEST,READINGTEST,LISTENINGTEST)
		VALUES (@IDCLASS,@SPEAKINGTEST,@WRITINGTEST,@READINGTEST,@LISTENINGTEST)
		END TRY
		BEGIN CATCH
			SELECT ERROR_MESSAGE() AS ErrorMessage
		END CATCH
END
--ĐẾM TỔNG ACCOUNT
CREATE PROCEDURE GetTotalAccount
AS
	BEGIN
		SELECT COUNT(*) AS TOTAL
		FROM USERS
	END
--LẤY THÔNG TIN TỪ BẢNG SEMESTER
CREATE PROCEDURE GetSemesterDetails
AS
BEGIN
	SELECT * FROM SEMESTER
END
-- HIỆN SỐ LỚP HIỆN ĐANG HOẠT ĐỘNG
CREATE PROCEDURE GetActiveClass
AS
	BEGIN
		SET NOCOUNT ON
		SELECT IDCLASS
		FROM CLASS
		WHERE STATES =N'Đang Hoạt Động'
END

-- ĐẾM SỐ LỚP HIỆN ĐANG KHÔNG HOẠT ĐỘNG
CREATE PROCEDURE GetInActiveClass
AS
	BEGIN
		
		SELECT COUNT(*) AS TotalInactiveClass
		FROM CLASS
		WHERE STATES =N'Đã Kết Thúc'
END

CREATE PROCEDURE GetActiveClassCount
AS
	BEGIN
		
		SELECT COUNT(*) AS TotalactiveClass
		FROM CLASS
		WHERE STATES =N'Đang Hoạt Động'
END
-- TRÍCH CLASSNAME BY ID
CREATE PROCEDURE GetClassNameByID
	@IDCLASS NVARCHAR(10)
AS
	BEGIN
		SET NOCOUNT ON
		SELECT CLASSNAME
		FROM CLASS
		WHERE IDCLASS =@IDCLASS
	END

-- TRÍCH DANH SÁCH LỚP
CREATE PROCEDURE GetListOfClass
AS
BEGIN
	SELECT * FROM CLASS
END
--ĐẾM TỔNG SỐ HỌC VIÊN NAM
CREATE PROCEDURE GetTotalMaleStudent
AS
BEGIN
	SELECT COUNT( *) FROM STUDENTINFOR WHERE GENDER ='Nam'
END
-- ĐẾM TỔNG HỌC VIÊN NỮ
CREATE PROCEDURE GetTotalFemaleStudent
AS
BEGIN
	SELECT COUNT(*) FROM STUDENTINFOR WHERE GENDER =N'Nữ'
END
-- ĐẾM TỔNG GIÁO VIÊN
CREATE PROCEDURE GetTotalTeacher
AS
BEGIN
	SELECT COUNT(*) FROM TEACHERINFOR 
END
--ĐẾM TỔNG GIÁO VIÊN NAM
CREATE PROCEDURE GetTotalMaleTeacher
AS
BEGIN
	SELECT COUNT(*) FROM TEACHERINFOR WHERE GENDER =N'Nam'
END
--TỔNG GIÁO VIÊN NỮ
CREATE PROCEDURE GetTotalFemaleTeacher
AS
BEGIN
	SELECT COUNT(*) FROM TEACHERINFOR WHERE GENDER =N'Nữ'
END
--TỔNG SỐ LƯỢNG LỚP HỌC
CREATE PROCEDURE GetTotalClass
AS
BEGIN
	SELECT COUNT(*) FROM CLASS
END
--LẤY THÔNG TIN HỌC PHÍ HV
CREATE PROCEDURE GetStudentFee
AS
BEGIN
	SELECT * FROM STUDENTFEE
END
-- SỐ LƯỢNG HỌC VIÊN ĐẬU
CREATE PROCEDURE CountPassedStudents
AS
BEGIN
    DECLARE @PassedCount INT;

    SELECT @PassedCount = COUNT(*)
    FROM SCORED
    WHERE READSCORED >= 13
      AND WRITESCORED >= 13
      AND SPEAKSCORED >= 13
      AND LISTENSCORED >= 13;

    SELECT @PassedCount AS NumberOfPassedStudents;
END
--SỐ LƯỢNG HỌC VIÊN RỚT
CREATE PROCEDURE CountFailedStudents
AS
BEGIN
    DECLARE @FailedCount INT;

    SELECT @FailedCount = COUNT(*)
    FROM SCORED
    WHERE READSCORED < 13
      OR WRITESCORED < 13
      OR SPEAKSCORED < 13
      OR LISTENSCORED < 13;

    SELECT @FailedCount AS NumberOfFailedStudents;
END

-- THÊM LỚP
CREATE PROCEDURE AddClassDetail
	@IDCLASS NVARCHAR(10),
	@CLASSNAME NVARCHAR(20),
	@STARTDATE DATETIME,
	@ENDDATE DATETIME,
	@CAHOC INT,
	@IDTEACHER NVARCHAR(10),
	@STATES NVARCHAR(MAX),
	@NUMBEROFSTUDENT INT,
	@ROOM INT,
	@TIMETABLE NVARCHAR(10)
AS
	BEGIN
		INSERT INTO CLASS(IDCLASS,CLASSNAME,STARTDATE,ENDDATE,IDTEACHER,CAHOC,STATES,NUMBEROFSTUDENT,ROOM,TIMETABLE)
		VALUES(@IDCLASS,@CLASSNAME,@STARTDATE,@ENDDATE,@IDTEACHER,@CAHOC,@STATES,@NUMBEROFSTUDENT,@ROOM,@TIMETABLE)		
	END
--LẤY TÊN GIÁO VIÊN THEO ID
CREATE PROCEDURE GetTeacherNameByID
	@IDTEACHER NVARCHAR(10)
AS
	BEGIN
		SELECT NAMEOFTEACHER
		FROM TEACHERINFOR 
		WHERE IDTEACHER =@IDTEACHER
	END

--DANH SÁCH ID GIÁO VIÊN

CREATE PROCEDURE GetTeacherID
AS
BEGIN
	SELECT IDTEACHER FROM TEACHERINFOR
END
--CẬP NHẬT THÔNG TIN HỌC VIÊN
CREATE PROCEDURE UpdateStudentsInfor
	@IDS NVARCHAR(10),
    @NAMESTUDENT NVARCHAR(50),
    @GENDER NVARCHAR(10),
    @BORNDATE DATETIME,
    @IDCLASS NVARCHAR(10),
    @STATES NVARCHAR(MAX)
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE STUDENTINFOR
	SET NAMESTUDENT = @NAMESTUDENT,
        GENDER = @GENDER,
        BORNDATE = @BORNDATE,
        IDCLASS = @IDCLASS,
        STATES = @STATES
	WHERE IDS =@IDS
END
--KIỂM TRA XEM TÀI KHOẢN HỌC VIÊN ĐÃ TỒN TẠI CHƯA
CREATE PROCEDURE CheckStudentAccountExist
	@USERNAME NVARCHAR(20)
AS
BEGIN 
    SELECT COUNT(*) AS AccountCount
    FROM USERS
    WHERE USERNAME = @USERNAME;
END
--CẬP NHẬP THÔNG TIN LỚP HỌC
CREATE PROCEDURE UpdateClassDetail
	@IDCLASS NVARCHAR(10),
	@CLASSNAME  NVARCHAR(20),
	@NUMBEROFSTUDENT INT,
	@STARTDATE DATETIME,
	@ENDDATE DATETIME,
	@IDTEACHER NVARCHAR(10),
	@CAHOC INT,
	@STATES NVARCHAR(MAX),
	@ROOM INT,
	@TIMETABLE NVARCHAR(10)
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE CLASS
	SET IDCLASS = @IDCLASS,
		CLASSNAME =@CLASSNAME,
		NUMBEROFSTUDENT =@NUMBEROFSTUDENT,
		STARTDATE = @STARTDATE,
		ENDDATE = @ENDDATE,
		IDTEACHER = @IDTEACHER,
		CAHOC = @CAHOC,
		STATES = @STATES,
		ROOM = @ROOM,
		TIMETABLE = @TIMETABLE
	WHERE IDCLASS =@IDCLASS
END
--XÁC ĐỊNH TRẠNG THÁI HỌC VIÊN
CREATE PROCEDURE GetStudentState
    @StudentID NVARCHAR(10)
AS
BEGIN
    SELECT ST.STATES
    FROM STUDENT S, STUDENTINFOR ST
    WHERE S.IDS =ST.IDS AND S.IDS =@StudentID 
END
--XÓA THÔNG TIN LỚP HỌC TRONG TÌNH TRẠNG MỚI TẠO
CREATE PROCEDURE DeleteClassDetail
    @IDCLASS NVARCHAR(10)
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM CLASS
    WHERE IDCLASS = @IDCLASS;
END

--SỬA THÔNG TIN HỌC PHÍ
CREATE PROCEDURE EditStudentFee
	@IDS NVARCHAR(10),
	@MONTHS INT,
	@DUEDATE DATETIME,
	@TUITIONFEE INT,
	@STATE NVARCHAR(MAX)
AS
BEGIN 
	UPDATE STUDENTFEE
	 SET IDS = @IDS,
		MONTHS = @MONTHS,
		DUEDATE=@DUEDATE,
		TUITIONFEE=@TUITIONFEE,
		STATE=@STATE
	WHERE IDS = @IDS
END

CREATE PROCEDURE GetTotalStudentAccount
AS
BEGIN
	SELECT COUNT(*)
	FROM USERS
	WHERE ROLE ='Student'
END
CREATE PROCEDURE CheckExistClass
	@IDCLASS NVARCHAR(10)
AS
BEGIN
     SELECT COUNT(*) 
	 FROM CLASS
	 WHERE IDCLASS =@IDCLASS
END

CREATE PROC DeleteExamDate
	@IDCLASS NVARCHAR(10)
AS
BEGIN
	DELETE  FROM SEMESTER
	WHERE IDCLASS =@IDCLASS
END

CREATE PROC UpdateExamDate
	@IDCLASS NVARCHAR(10),
	@WRITINGDATE DATETIME,
	@READINGDATE DATETIME,
	@SPEAKINGDATE DATETIME,
	@LISTENINGDATE DATETIME

AS
BEGIN
	UPDATE SEMESTER
	SET LISTENINGTEST = @LISTENINGDATE,
		WRITINGTEST = @WRITINGDATE,
		READINGTEST = @READINGDATE,
		SPEAKINGTEST = @SPEAKINGDATE
	WHERE IDCLASS = @IDCLASS
END

CREATE PROC GetMaxUserID
AS
BEGIN
SELECT MAX(IDUSER)
FROM USERS
END
CREATE PROC CheckIfStudentIDexist
	@IDSTUDENT NVARCHAR(10)
AS
BEGIN
	SELECT COUNT(IDS) AS NUMBEROFID
	FROM STUDENTINFOR
	WHERE IDS = @IDSTUDENT
END
